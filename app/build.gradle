apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

enum BuildType {
    DEBUG,
    RELEASE
}

static def getAppName(BuildType buildType) {
    String APP_NAME = "Milestones"
    switch (buildType) {
        case BuildType.DEBUG:
            return APP_NAME + " - " + BuildType.DEBUG.name()
        case BuildType.RELEASE:
            return APP_NAME
    }
}
android {
    compileSdkVersion 28
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId appConfig.applicationId
            minSdkVersion appConfig.minSdkVersion
            targetSdkVersion appConfig.targetSdkVersion
            compileSdkVersion appConfig.compileSdkVersion
            versionCode appConfig.versionMajor * 1000000 + appConfig.versionMinor * 10000 + code
            versionName "${appConfig.versionMajor}.${appConfig.versionMinor}.${code}"
            vectorDrawables.useSupportLibrary = true

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

    }
    signingConfigs {
        release {
            def keystorePropertiesFile = file("keystore/release.keystore.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            storeFile file(keystoreProperties['store.file'])
            storePassword keystoreProperties['key.store.password']
            keyAlias keystoreProperties['key.alias']
            keyPassword keystoreProperties['key.alias.password']
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".staging"
            resValue "string", "app_name", getAppName(BuildType.DEBUG)
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", getAppName(BuildType.RELEASE)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    implementation libraries.kotlinJdk
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'com.google.android.material:material:1.1.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation libraries.dagger
    implementation 'com.google.android.material:material:1.0.0'

    implementation libraries.rxAndroid
    implementation libraries.rxJava

    implementation libraries.jodaTime


    implementation libraries.firebaseCore
    implementation libraries.firebaseAuth
    implementation libraries.firebaseDatabase
    implementation libraries.rxfirebase

    implementation devLibraries.timber

    kapt libraries.daggerCompiler
    kaptTest libraries.daggerCompiler

    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

apply plugin: 'com.google.gms.google-services'
